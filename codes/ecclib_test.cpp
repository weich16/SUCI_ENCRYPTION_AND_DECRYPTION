#include "ecclib.h"
#pragma comment(lib,"libssl.lib")
#pragma comment(lib,"libcrypto.lib")
#include <iostream>
using namespace std;

u8 home_public_key_A[EPH_KEY_LENGTH] =
{ 0x5a,0x8d,0x38,0x86,0x48,0x20,0x19,0x7c,0x33,0x94,0xb9,0x26,0x13,0xb2,0x0b,0x91,
  0x63,0x3c,0xbd,0x89,0x71,0x19,0x27,0x3b,0xf8,0xe4,0xa6,0xf4,0xee,0xc0,0xa6,0x50 };
u8 home_private_key_A[EPH_KEY_LENGTH] =
{ 0xc5,0x3c,0x22,0x20,0x8b,0x61,0x86,0x0b,0x06,0xc6,0x2e,0x54,0x06,0xa7,0xb3,0x30,
  0xc2,0xb5,0x77,0xaa,0x55,0x58,0x98,0x15,0x10,0xd1,0x28,0x24,0x7d,0x38,0xbd,0x1d };
u8 home_public_key_B[1 + EPH_KEY_LENGTH] =
{ 0x02,
  0x72,0xDA,0x71,0x97,0x62,0x34,0xCE,0x83,0x3A,0x69,0x07,0x42,0x58,0x67,0xB8,0x2E,
  0x07,0x4D,0x44,0xEF,0x90,0x7D,0xFB,0x4B,0x3E,0x21,0xC1,0xC2,0x25,0x6E,0xBC,0xD1 };
u8 home_private_key_B[EPH_KEY_LENGTH] =
{ 0xF1,0xAB,0x10,0x74,0x47,0x7E,0xBC,0xC7,0xF5,0x54,0xEA,0x1C,0x5F,0xC3,0x68,0xB1,
  0x61,0x67,0x30,0x15,0x5E,0x00,0x41,0xAC,0x44,0x7D,0x63,0x01,0x97,0x5F,0xEC,0xDA };
u8 UE_public_key_A[EPH_KEY_LENGTH] =
{ 0xb2,0xe9,0x2f,0x83,0x60,0x55,0xa2,0x55,0x83,0x7d,0xeb,0xf8,0x50,0xb5,0x28,0x99,
  0x7c,0xe0,0x20,0x1c,0xb8,0x2a,0xdf,0xe4,0xbe,0x1f,0x58,0x7d,0x07,0xd8,0x45,0x7d };
u8 UE_public_key_B[1 + EPH_KEY_LENGTH] =
{ 0x03,
  0x9A,0xAB,0x83,0x76,0x59,0x70,0x21,0xE8,0x55,0x67,0x9A,0x97,0x78,0xEA,0x0B,0x67,
  0x39,0x6E,0x68,0xC6,0x6D,0xF3,0x2C,0x0F,0x41,0xE9,0xAC,0xCA,0x2D,0xA9,0xB9,0xD1 };
u8 ciphertext_A[5] = { 0xcb,0x02,0x35,0x24,0x10 };
u8 ciphertext_B[5] = { 0x46,0xA3,0x3F,0xC2,0x71 };
u8 mac_A[8] = { 0xcd,0xdd,0x9e,0x73,0x0e,0xf3,0xfa,0x87 };
u8 mac_B[8] = { 0x6A,0xC7,0xDA,0xE9,0x6A,0xA3,0x0A,0x4D };

int main()
{
	/*
	//SUPI_encryption_test
	int type = 0;
	int schid = 2;
	u8 userid[10] = "001002086";
	int textlen = 9;
	u8 ecckey[EPH_KEY_LENGTH + 1];
	u8 cip[MAX_INFO_LENGTH];
	u8 mac[MAC_TAG_LENGTH];

	void* UE_key;
	Eph_key_generator(schid, &UE_key);

	if (type == 0)
	{
		u8 msin_bcd[5];
		MSIN_BCD_encoder(userid, msin_bcd, &textlen);
		printf("MSIN_BCD:");
		display(msin_bcd, 5);
		SUPI_encryption(schid, home_public_key_B, UE_key, msin_bcd, textlen, ecckey, cip, mac);
	}
	else
	{
		SUPI_encryption(schid, home_public_key_A, UE_key, userid, textlen, ecckey, cip, mac);
	}

	return 0;
	*/

	/*
	//SUCI_decryption_test
	int type = 0;
	int schid = 2;
	int textlen = 5;
	u8 plaintext[MAX_INFO_LENGTH];
	SUCI_decryption(schid, UE_public_key_B, home_private_key_B, ciphertext_B, textlen, mac_B, plaintext);
	u8 MSIN[20] = { 0 };
	MSIN_BCD_decoder(plaintext, MSIN, &textlen);
	printf("MSIN:%s",MSIN);
	*/

	//joint test
	int schid = 2;
	u8 userid[10] = "001002086";
	int textlen = 9;
	u8 ecckey[EPH_KEY_LENGTH + 1];
	u8 cip[MAX_INFO_LENGTH];
	u8 mac[MAC_TAG_LENGTH];

	void* UE_key;
	Eph_key_generator(schid, &UE_key);

	u8 msin_bcd[5];
	MSIN_BCD_encoder(userid, msin_bcd, &textlen);
	printf("MSIN_BCD:");
	display(msin_bcd, 5);
	SUPI_encryption(schid, home_public_key_B, UE_key, msin_bcd, textlen, ecckey, cip, mac);

	u8 plaintext[MAX_INFO_LENGTH];
	SUCI_decryption(schid, ecckey, home_private_key_B, cip, textlen, mac, plaintext);
	u8 MSIN[20] = { 0 };
	MSIN_BCD_decoder(plaintext, MSIN, &textlen);
	printf("MSIN:%s", MSIN);
}

